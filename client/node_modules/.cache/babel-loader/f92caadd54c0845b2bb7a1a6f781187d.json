{"ast":null,"code":"import info from \"./cities.json\";\nlet cities;\ncities = info;\n\nfunction autoComplete(inp, arr) {\n  /*the autocomplete function takes two arguments,\n    the text field element and an array of possible autocompleted values:*/\n  var currentFocus = 0;\n  /*execute a function when someone writes in the text field:*/\n\n  inp.addEventListener(\"input\", function (e) {\n    var a,\n        b,\n        i,\n        val = this.value;\n    /*close any already open lists of autocompleted values*/\n\n    closeAllLists();\n\n    if (!val) {\n      return false;\n    }\n\n    currentFocus = -1;\n    /*create a DIV element that will contain the items (values):*/\n\n    a = document.createElement(\"DIV\");\n    a.setAttribute(\"id\", \"autocomplete-list\");\n    a.setAttribute(\"class\", \"autocomplete-items\");\n    /*append the DIV element as a child of the autocomplete container:*/\n\n    this.parentNode.appendChild(a);\n    let count = 0;\n    /*for each item in the array...*/\n\n    for (i = 0; i < arr.length; i++) {\n      /*check if the item starts with the same letters as the text field value:*/\n      if (arr[i].name.substr(0, val.length).toUpperCase() === val.toUpperCase()) {\n        /*create a DIV element for each matching element:*/\n        b = document.createElement(\"DIV\");\n        count++;\n        /*make the matching letters bold:*/\n\n        b.innerHTML = \"<strong>\" + arr[i].name.substr(0, val.length) + \"</strong>\";\n        b.innerHTML += arr[i].name.substr(val.length);\n        /*insert a input field that will hold the current array item's value:*/\n\n        b.innerHTML += \"<input type='hidden' value='\" + arr[i].name + \"'>\";\n        /*execute a function when someone clicks on the item value (DIV element):*/\n\n        b.addEventListener(\"click\", function (e) {\n          /*insert the value for the autocomplete text field:*/\n          inp.value = this.getElementsByTagName(\"input\")[0].value;\n          /*close the list of autocompleted values,\n                      (or any other open lists of autocompleted values:*/\n\n          closeAllLists();\n        });\n        a.appendChild(b);\n      }\n\n      if (count > 3) {\n        break;\n      }\n    }\n  });\n  /*execute a function presses a key on the keyboard:*/\n\n  inp.addEventListener(\"keydown\", function (e) {\n    var x = document.getElementById(\"autocomplete-list\");\n    if (x) x = x.getElementsByTagName(\"div\");\n\n    if (e.keyCode === 40) {\n      /*If the arrow DOWN key is pressed,\n                increase the currentFocus variable:*/\n      currentFocus++;\n      /*and and make the current item more visible:*/\n\n      addActive(x);\n    } else if (e.keyCode === 38) {\n      //up\n\n      /*If the arrow UP key is pressed,\n                decrease the currentFocus variable:*/\n      currentFocus--;\n      /*and and make the current item more visible:*/\n\n      addActive(x);\n    } else if (e.keyCode === 13) {\n      /*If the ENTER key is pressed, prevent the form from being submitted,*/\n      e.preventDefault();\n\n      if (currentFocus > -1) {\n        /*and simulate a click on the \"active\" item:*/\n        if (x) x[currentFocus].click();\n      }\n    }\n  });\n\n  function addActive(x) {\n    /*a function to classify an item as \"active\":*/\n    if (!x) return false;\n    /*start by removing the \"active\" class on all items:*/\n\n    removeActive(x);\n    if (currentFocus >= x.length) currentFocus = 0;\n    if (currentFocus < 0) currentFocus = x.length - 1;\n    /*add class \"autocomplete-active\":*/\n\n    x[currentFocus].classList.add(\"autocomplete-active\");\n  }\n\n  function removeActive(x) {\n    /*a function to remove the \"active\" class from all autocomplete items:*/\n    for (var i = 0; i < x.length; i++) {\n      x[i].classList.remove(\"autocomplete-active\");\n    }\n  }\n\n  function closeAllLists(elmnt) {\n    /*close all autocomplete lists in the document,\n            except the one passed as an argument:*/\n    var x = document.getElementsByClassName(\"autocomplete-items\");\n\n    for (var i = 0; i < x.length; i++) {\n      if (elmnt !== x[i] && elmnt !== inp) {\n        x[i].parentNode.removeChild(x[i]);\n      }\n    }\n  }\n  /*execute a function when someone clicks in the document:*/\n\n\n  document.addEventListener(\"click\", function (e) {\n    closeAllLists(e.target);\n  });\n}\n\nlet autocomplete = () => {\n  autoComplete(document.getElementById(\"search\"), cities);\n};\n\nexport default autocomplete;","map":{"version":3,"sources":["/home/mihai/Documents/weatherApp/client/src/utils/autocomplete.tsx"],"names":["info","cities","autoComplete","inp","arr","currentFocus","addEventListener","e","a","b","i","val","value","closeAllLists","document","createElement","setAttribute","parentNode","appendChild","count","length","name","substr","toUpperCase","innerHTML","getElementsByTagName","x","getElementById","keyCode","addActive","preventDefault","click","removeActive","classList","add","remove","elmnt","getElementsByClassName","removeChild","target","autocomplete"],"mappings":"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","sourcesContent":["import info from \"./cities.json\";\n\nlet cities: [];\ncities = info as [];\n\nfunction autoComplete(inp: any, arr: any) {\n    /*the autocomplete function takes two arguments,\n      the text field element and an array of possible autocompleted values:*/\n    var currentFocus = 0;\n    /*execute a function when someone writes in the text field:*/\n    inp.addEventListener(\"input\", function (this: any, e: any) {\n      var a,\n        b,\n        i,\n        val = this.value;\n      /*close any already open lists of autocompleted values*/\n      closeAllLists();\n      if (!val) {\n        return false;\n      }\n      currentFocus= -1;\n      /*create a DIV element that will contain the items (values):*/\n      a = document.createElement(\"DIV\");\n      a.setAttribute(\"id\", \"autocomplete-list\");\n      a.setAttribute(\"class\", \"autocomplete-items\");\n      /*append the DIV element as a child of the autocomplete container:*/\n      this.parentNode.appendChild(a);\n      let count = 0;\n      /*for each item in the array...*/\n      for (i = 0; i < arr.length; i++) {\n        /*check if the item starts with the same letters as the text field value:*/\n        if (arr[i].name.substr(0, val.length).toUpperCase() === val.toUpperCase()) {\n          /*create a DIV element for each matching element:*/\n          b = document.createElement(\"DIV\");\n          count++;\n          /*make the matching letters bold:*/\n          b.innerHTML = \"<strong>\" + arr[i].name.substr(0, val.length) + \"</strong>\";\n          b.innerHTML += arr[i].name.substr(val.length);\n          /*insert a input field that will hold the current array item's value:*/\n          b.innerHTML += \"<input type='hidden' value='\" + arr[i].name + \"'>\";\n          /*execute a function when someone clicks on the item value (DIV element):*/\n          b.addEventListener(\"click\", function (e) {\n            /*insert the value for the autocomplete text field:*/\n            inp.value = this.getElementsByTagName(\"input\")[0].value;\n            /*close the list of autocompleted values,\n                        (or any other open lists of autocompleted values:*/\n            closeAllLists();\n          });\n          a.appendChild(b);\n        }\n        if(count > 3) {\n            break;\n        }\n      }\n    });\n    /*execute a function presses a key on the keyboard:*/\n    inp.addEventListener(\"keydown\", function (e: any) {\n      var x = document.getElementById(\"autocomplete-list\");\n      if (x) x = x.getElementsByTagName(\"div\") as unknown as HTMLInputElement;\n      if (e.keyCode === 40) {\n        /*If the arrow DOWN key is pressed,\n                  increase the currentFocus variable:*/\n        currentFocus++;\n        /*and and make the current item more visible:*/\n        addActive(x);\n      } else if (e.keyCode === 38) {\n        //up\n        /*If the arrow UP key is pressed,\n                  decrease the currentFocus variable:*/\n        currentFocus--;\n        /*and and make the current item more visible:*/\n        addActive(x);\n      } else if (e.keyCode === 13) {\n        /*If the ENTER key is pressed, prevent the form from being submitted,*/\n        e.preventDefault();\n        if (currentFocus > -1) {\n          /*and simulate a click on the \"active\" item:*/\n          if (x) (x as any)[currentFocus].click();\n        }\n      }\n    });\n    function addActive(x: any) {\n      /*a function to classify an item as \"active\":*/\n      if (!x) return false;\n      /*start by removing the \"active\" class on all items:*/\n      removeActive(x);\n      if (currentFocus >= x.length) currentFocus = 0;\n      if (currentFocus < 0) currentFocus = x.length - 1;\n      /*add class \"autocomplete-active\":*/\n      x[currentFocus].classList.add(\"autocomplete-active\");\n    }\n    function removeActive(x: any) {\n      /*a function to remove the \"active\" class from all autocomplete items:*/\n      for (var i = 0; i < x.length; i++) {\n        x[i].classList.remove(\"autocomplete-active\");\n      }\n    }\n    function closeAllLists(elmnt?: any) {\n      /*close all autocomplete lists in the document,\n              except the one passed as an argument:*/\n      var x = document.getElementsByClassName(\"autocomplete-items\");\n      for (var i = 0; i < x.length; i++) {\n        if (elmnt !== x[i] && elmnt !== inp) {\n          x[i].parentNode!.removeChild(x[i]);\n        }\n      }\n    }\n    /*execute a function when someone clicks in the document:*/\n    document.addEventListener(\"click\", function (e) {\n      closeAllLists(e.target);\n    });\n  }\nlet autocomplete = () => {\n    autoComplete(document.getElementById(\"search\"), cities);\n}\n\nexport default autocomplete;"]},"metadata":{},"sourceType":"module"}