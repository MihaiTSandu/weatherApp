{"ast":null,"code":"let autocomplete = () => {\n  const matchList = document.getElementById(\"match-list\");\n  const search = document.getElementById(\"search\");\n  search.addEventListener('input', () => searchCity(search.value)); // Show suggestions in HTML\n\n  const outputHTML = matches => {\n    if (matches.length > 0) {\n      const html = matches.map(match => `\n                    <div>\n                    <h4>${match.name}</h4>\n                    </div> \n                `).join('');\n      matchList.innerHTML = html;\n    }\n  }; // Search cities.json\n\n\n  const searchCity = async searchText => {\n    const response = await fetch('./cities.json');\n    console.log(response);\n    const cities = await response.json();\n    console.log(cities + \" cities\"); // Get matches to the text input\n\n    let matches = cities.filter(city => {\n      const regex = new RegExp(`^${searchText}`, 'gi');\n      return city.name.match(regex) || city.abbr.match(regex);\n    });\n\n    if (searchText.length === 0) {\n      matches = [];\n    }\n\n    outputHTML(matches);\n  };\n};\n\nexport default autocomplete;","map":{"version":3,"sources":["/home/mihai/Documents/weatherApp/src/api/autocomplete.tsx"],"names":["autocomplete","matchList","document","getElementById","search","addEventListener","searchCity","value","outputHTML","matches","length","html","map","match","name","join","innerHTML","searchText","response","fetch","console","log","cities","json","filter","city","regex","RegExp","abbr"],"mappings":"AAAA,IAAIA,YAAY,GAAG,MAAM;AACrB,QAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAlB;AACA,QAAMC,MAAM,GAAGF,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAf;AAEAC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiC,MAAMC,UAAU,CAACF,MAAM,CAACG,KAAR,CAAjD,EAJqB,CAMrB;;AACA,QAAMC,UAAU,GAAGC,OAAO,IAAI;AAC1B,QAAIA,OAAO,CAACC,MAAR,GAAiB,CAArB,EAAwB;AACpB,YAAMC,IAAI,GAAGF,OAAO,CAACG,GAAR,CAAYC,KAAK,IAAK;AAC/C;AACA,0BAA0BA,KAAK,CAACC,IAAK;AACrC;AACA,iBAJyB,EAINC,IAJM,CAID,EAJC,CAAb;AAMAd,MAAAA,SAAS,CAACe,SAAV,GAAsBL,IAAtB;AACH;AACJ,GAVD,CAPqB,CAmBrB;;;AACA,QAAML,UAAU,GAAG,MAAMW,UAAN,IAAoB;AACnC,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAD,CAA5B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,UAAMI,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAArB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,GAAG,SAArB,EAJmC,CAMnC;;AACA,QAAIb,OAAO,GAAGa,MAAM,CAACE,MAAP,CAAcC,IAAI,IAAI;AAChC,YAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAY,IAAGV,UAAW,EAA1B,EAA6B,IAA7B,CAAd;AACA,aAAOQ,IAAI,CAACX,IAAL,CAAUD,KAAV,CAAgBa,KAAhB,KAA0BD,IAAI,CAACG,IAAL,CAAUf,KAAV,CAAgBa,KAAhB,CAAjC;AACH,KAHa,CAAd;;AAKA,QAAIT,UAAU,CAACP,MAAX,KAAsB,CAA1B,EAA6B;AACzBD,MAAAA,OAAO,GAAG,EAAV;AACH;;AAEDD,IAAAA,UAAU,CAACC,OAAD,CAAV;AACH,GAjBD;AAkBH,CAtCD;;AAyCA,eAAeT,YAAf","sourcesContent":["let autocomplete = () => {\n    const matchList = document.getElementById(\"match-list\");\n    const search = document.getElementById(\"search\") as HTMLInputElement;\n\n    search.addEventListener('input', () => searchCity(search.value));\n\n    // Show suggestions in HTML\n    const outputHTML = matches => {\n        if (matches.length > 0) {\n            const html = matches.map(match => `\n                    <div>\n                    <h4>${match.name}</h4>\n                    </div> \n                `).join('');\n\n            matchList.innerHTML = html;\n        }\n    }\n\n    // Search cities.json\n    const searchCity = async searchText => {\n        const response = await fetch('./cities.json');\n        console.log(response)\n        const cities = await response.json();\n        console.log(cities + \" cities\");\n\n        // Get matches to the text input\n        let matches = cities.filter(city => {\n            const regex = new RegExp(`^${searchText}`, 'gi');\n            return city.name.match(regex) || city.abbr.match(regex);\n        });\n\n        if (searchText.length === 0) {\n            matches = [];\n        }\n\n        outputHTML(matches);\n    };\n}\n\n\nexport default autocomplete;"]},"metadata":{},"sourceType":"module"}