{"ast":null,"code":"let convert = () => {\n  var fs = require('fs');\n\n  var jsonfile = require('jsonfile');\n\n  var readline = require('readline');\n\n  var file = './cities.json';\n  var cities = [],\n      i = 0,\n      city;\n  readline.createInterface({\n    input: fs.createReadStream('./cities1000.txt'),\n    output: process.stdout,\n    terminal: false\n  }).on('line', function (line) {\n    city = line.split(\"\\t\");\n\n    if (i !== 0) {\n      // geonameid         : integer id of record in geonames database\n      // name              : name of geographical point (utf8) varchar(200)\n      // asciiname         : name of geographical point in plain ascii characters, varchar(200)\n      // alternatenames    : alternatenames, comma separated, ascii names automatically transliterated, convenience attribute from alternatename table, varchar(10000)\n      // latitude          : latitude in decimal degrees (wgs84)\n      // longitude         : longitude in decimal degrees (wgs84)\n      // feature class     : see http://www.geonames.org/export/codes.html, char(1)\n      // feature code      : see http://www.geonames.org/export/codes.html, varchar(10)\n      // country code      : ISO-3166 2-letter country code, 2 characters\n      // cc2               : alternate country codes, comma separated, ISO-3166 2-letter country code, 200 characters\n      // admin1 code       : fipscode (subject to change to iso code), see exceptions below, see file admin1Codes.txt for display names of this code; varchar(20)\n      // admin2 code       : code for the second administrative division, a county in the US, see file admin2Codes.txt; varchar(80)\n      // admin3 code       : code for third level administrative division, varchar(20)\n      // admin4 code       : code for fourth level administrative division, varchar(20)\n      // population        : bigint (8 byte int)\n      // elevation         : in meters, integer\n      // dem               : digital elevation model, srtm3 or gtopo30, average elevation of 3''x3'' (ca 90mx90m) or 30''x30'' (ca 900mx900m) area in meters, integer. srtm processed by cgiar/ciat.\n      // timezone          : the iana timezone id (see file timeZone.txt) varchar(40)\n      // modification date : date of last modification in yyyy-MM-dd format\n      cities.push({\n        country: city[8],\n        name: city[1].replace('\"', '').replace('\"', ''),\n        lat: city[4],\n        lng: city[5]\n      });\n    }\n\n    i++;\n  }).on('close', function () {\n    jsonfile.writeFile(file, cities, {\n      spaces: 2\n    }, function (err) {\n      if (err) {\n        console.error(err);\n      }\n    });\n  });\n};\n\nexport default convert;","map":{"version":3,"sources":["/home/mihai/Documents/weatherApp/src/api/convert.js"],"names":["convert","fs","require","jsonfile","readline","file","cities","i","city","createInterface","input","createReadStream","output","process","stdout","terminal","on","line","split","push","country","name","replace","lat","lng","writeFile","spaces","err","console","error"],"mappings":"AAAA,IAAIA,OAAO,GAAG,MAAM;AAEpB,MAAIC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,MAAIC,QAAQ,GAAID,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAIE,QAAQ,GAAIF,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAIG,IAAI,GAAG,eAAX;AACA,MAAIC,MAAM,GAAG,EAAb;AAAA,MAAiBC,CAAC,GAAG,CAArB;AAAA,MAAwBC,IAAxB;AAEAJ,EAAAA,QAAQ,CAACK,eAAT,CAAyB;AACvBC,IAAAA,KAAK,EAAET,EAAE,CAACU,gBAAH,CAAoB,kBAApB,CADgB;AAEvBC,IAAAA,MAAM,EAAEC,OAAO,CAACC,MAFO;AAGvBC,IAAAA,QAAQ,EAAE;AAHa,GAAzB,EAIGC,EAJH,CAIM,MAJN,EAIc,UAASC,IAAT,EAAe;AAC3BT,IAAAA,IAAI,GAAGS,IAAI,CAACC,KAAL,CAAW,IAAX,CAAP;;AACA,QAAIX,CAAC,KAAK,CAAV,EAAa;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,MAAAA,MAAM,CAACa,IAAP,CAAY;AACVC,QAAAA,OAAO,EAAEZ,IAAI,CAAC,CAAD,CADH;AAEVa,QAAAA,IAAI,EAAEb,IAAI,CAAC,CAAD,CAAJ,CAAQc,OAAR,CAAgB,GAAhB,EAAqB,EAArB,EAAyBA,OAAzB,CAAiC,GAAjC,EAAsC,EAAtC,CAFI;AAGVC,QAAAA,GAAG,EAAEf,IAAI,CAAC,CAAD,CAHC;AAIVgB,QAAAA,GAAG,EAAEhB,IAAI,CAAC,CAAD;AAJC,OAAZ;AAMD;;AACDD,IAAAA,CAAC;AACF,GAlCD,EAkCGS,EAlCH,CAkCM,OAlCN,EAkCe,YAAW;AACxBb,IAAAA,QAAQ,CAACsB,SAAT,CAAmBpB,IAAnB,EAAyBC,MAAzB,EAAiC;AAACoB,MAAAA,MAAM,EAAE;AAAT,KAAjC,EAA8C,UAAUC,GAAV,EAAe;AAC3D,UAAIA,GAAJ,EAAS;AACPC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF,KAJD;AAKD,GAxCD;AAyCC,CAlDD;;AAmDA,eAAe3B,OAAf","sourcesContent":["let convert = () => {\n\nvar fs = require('fs');\nvar jsonfile  = require('jsonfile');\nvar readline  = require('readline');\n\nvar file = './cities.json';\nvar cities = [], i = 0, city;\n\nreadline.createInterface({\n  input: fs.createReadStream('./cities1000.txt'),\n  output: process.stdout,\n  terminal: false\n}).on('line', function(line) {\n  city = line.split(\"\\t\");\n  if (i !== 0) {\n    // geonameid         : integer id of record in geonames database\n    // name              : name of geographical point (utf8) varchar(200)\n    // asciiname         : name of geographical point in plain ascii characters, varchar(200)\n    // alternatenames    : alternatenames, comma separated, ascii names automatically transliterated, convenience attribute from alternatename table, varchar(10000)\n    // latitude          : latitude in decimal degrees (wgs84)\n    // longitude         : longitude in decimal degrees (wgs84)\n    // feature class     : see http://www.geonames.org/export/codes.html, char(1)\n    // feature code      : see http://www.geonames.org/export/codes.html, varchar(10)\n    // country code      : ISO-3166 2-letter country code, 2 characters\n    // cc2               : alternate country codes, comma separated, ISO-3166 2-letter country code, 200 characters\n    // admin1 code       : fipscode (subject to change to iso code), see exceptions below, see file admin1Codes.txt for display names of this code; varchar(20)\n    // admin2 code       : code for the second administrative division, a county in the US, see file admin2Codes.txt; varchar(80)\n    // admin3 code       : code for third level administrative division, varchar(20)\n    // admin4 code       : code for fourth level administrative division, varchar(20)\n    // population        : bigint (8 byte int)\n    // elevation         : in meters, integer\n    // dem               : digital elevation model, srtm3 or gtopo30, average elevation of 3''x3'' (ca 90mx90m) or 30''x30'' (ca 900mx900m) area in meters, integer. srtm processed by cgiar/ciat.\n    // timezone          : the iana timezone id (see file timeZone.txt) varchar(40)\n    // modification date : date of last modification in yyyy-MM-dd format\n    cities.push({\n      country: city[8],\n      name: city[1].replace('\"', '').replace('\"', ''),\n      lat: city[4],\n      lng: city[5]\n    });\n  }\n  i++;\n}).on('close', function() {\n  jsonfile.writeFile(file, cities, {spaces: 2}, function (err) {\n    if (err) {\n      console.error(err)\n    }\n  })\n});\n}\nexport default convert;"]},"metadata":{},"sourceType":"module"}