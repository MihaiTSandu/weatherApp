{"ast":null,"code":"const search = document.getElementById(\"search\");\nconst matchList = document.getElementById(\"match-list\");\nsearch.addEventListener('input', () => searchCity(search.value)); // Search cities.json\n\nconst searchCity = async searchText => {\n  const response = await fetch('./cities.json');\n  const cities = await response.json(); // console.log(cities);\n  // Get matches to the text input\n\n  let matches = cities.filter(city => {\n    const regex = new RegExp(`^${searchText}`, 'gi');\n    return city.name.match(regex) || city.abbr.match(regex);\n  });\n\n  if (searchText.length === 0) {\n    matches = [];\n  }\n\n  console.log(matches);\n};\n\nlet autocomplete = () => {};\n\nexport default autocomplete;","map":{"version":3,"sources":["/home/mihai/Documents/weatherApp/src/api/autocomplete.tsx"],"names":["search","document","getElementById","matchList","addEventListener","searchCity","value","searchText","response","fetch","cities","json","matches","filter","city","regex","RegExp","name","match","abbr","length","console","log","autocomplete"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAf;AACA,MAAMC,SAAS,GAAGF,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAlB;AAIAF,MAAM,CAACI,gBAAP,CAAwB,OAAxB,EAAiC,MAAMC,UAAU,CAACL,MAAM,CAACM,KAAR,CAAjD,E,CAEA;;AACA,MAAMD,UAAU,GAAG,MAAME,UAAN,IAAoB;AACnC,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAD,CAA5B;AACA,QAAMC,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB,CAFmC,CAInC;AACA;;AACA,MAAIC,OAAO,GAAGF,MAAM,CAACG,MAAP,CAAcC,IAAI,IAAI;AAChC,UAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAY,IAAGT,UAAW,EAA1B,EAA6B,IAA7B,CAAd;AACA,WAAOO,IAAI,CAACG,IAAL,CAAUC,KAAV,CAAgBH,KAAhB,KAA0BD,IAAI,CAACK,IAAL,CAAUD,KAAV,CAAgBH,KAAhB,CAAjC;AACH,GAHa,CAAd;;AAKA,MAAIR,UAAU,CAACa,MAAX,KAAsB,CAA1B,EAA6B;AACzBR,IAAAA,OAAO,GAAG,EAAV;AACH;;AAEDS,EAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ;AACH,CAhBD;;AAkBA,IAAIW,YAAY,GAAG,MAAM,CAGxB,CAHD;;AAMA,eAAeA,YAAf","sourcesContent":["const search = document.getElementById(\"search\") as HTMLInputElement;\nconst matchList = document.getElementById(\"match-list\");\n\n\n\nsearch.addEventListener('input', () => searchCity(search.value));\n\n// Search cities.json\nconst searchCity = async searchText => {\n    const response = await fetch('./cities.json');\n    const cities = await response.json();\n\n    // console.log(cities);\n    // Get matches to the text input\n    let matches = cities.filter(city => {\n        const regex = new RegExp(`^${searchText}`, 'gi');\n        return city.name.match(regex) || city.abbr.match(regex);\n    });\n\n    if (searchText.length === 0) {\n        matches = [];\n    }\n\n    console.log(matches);\n}\n\nlet autocomplete = () => {\n\n\n}\n\n\nexport default autocomplete;"]},"metadata":{},"sourceType":"module"}