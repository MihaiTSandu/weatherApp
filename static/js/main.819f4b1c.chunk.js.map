{"version":3,"sources":["app/components/SearchBar/index.tsx","utils/get-city-weather.ts","app/components/WeatherInfo/index.tsx","styles/media.ts","app/pages/HomePage/index.tsx","styles/global-styles.ts","app/index.tsx","index.tsx"],"names":["INPUT_ID","SearchBar","onSubmit","inputRef","useRef","useState","searchResults","setSearchResults","highlightedIndex","setHighlightedIndex","searchValue","setSearchValue","didClickSearch","event","name","target","value","current","blur","SearchBarContainer","SearchContainer","htmlFor","StyledInput","ref","id","type","placeholder","onInput","input","inputValue","trim","toLowerCase","replaceAll","filteredCities","cities","filter","startsWith","length","slice","onKeyDown","key","Key","ArrowDown","preventDefault","ArrowUp","Enter","autoComplete","Dropdown","map","result","resultIndex","DropdownSearchResult","highlighted","country","lat","lng","ButtonContainer","SearchButton","onClick","styled","div","p","label","button","getCityWeather","latitude","longitude","a","position","coords","getCoordinates","params","lon","appid","process","units","fetch","URLSearchParams","json","data","Promise","resolve","navigator","geolocation","getCurrentPosition","weatherIconDesign","icon","color","size","animate","WeatherInfo","temperature","setTemperature","location","setLocation","getLocalWeatherInfo","useCallback","weather","main","temp","useEffect","WeatherInfoContainer","LocationHeader","width","TemperatureHeader","toFixed","h1","sizes","small","medium","large","xlarge","media","Object","keys","reduce","acc","first","interpolations","css","HomePage","city","setCity","HomePageContainer","Header","ResultContainer","GlobalStyle","createGlobalStyle","App","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.819f4b1c.chunk.js","sourcesContent":["import { ICity } from 'app/components/SearchBar/i-city';\nimport cities from 'cities.json';\nimport React, { useRef, useState } from 'react';\nimport styled from 'styled-components/macro';\nimport { Key } from 'ts-key-enum';\n\nconst INPUT_ID = 'autocomplete-input';\n\nexport interface ISearchBarProps {\n  onSubmit?: (city: ICity) => void;\n}\n\nexport default function SearchBar({ onSubmit }: ISearchBarProps) {\n  const inputRef = useRef<HTMLInputElement>();\n  const [searchResults, setSearchResults] = useState<Array<ICity>>([]);\n  const [highlightedIndex, setHighlightedIndex] = useState(-1);\n  const [searchValue, setSearchValue] = useState('');\n\n  const didChangeInput = (event: React.FormEvent<HTMLInputElement>) => {\n    const input = event.target as HTMLInputElement;\n    const inputValue = input.value.trim().toLowerCase().replaceAll(/\\s/g, '');\n\n    const filteredCities = (cities as Array<ICity>).filter(({ name }) =>\n      name.trim().toLowerCase().replaceAll(/\\s/g, '').startsWith(inputValue),\n    );\n\n    setSearchResults(inputValue.length === 0 ? [] : filteredCities.slice(0, 5));\n    setSearchValue(input.value);\n  };\n\n  const didKeyPressInput = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    switch (event.key) {\n      case Key.ArrowDown:\n        event.preventDefault();\n\n        setHighlightedIndex(\n          highlightedIndex === searchResults.length - 1\n            ? 0\n            : highlightedIndex + 1,\n        );\n        break;\n\n      case Key.ArrowUp:\n        event.preventDefault();\n\n        setHighlightedIndex(\n          highlightedIndex === 0\n            ? searchResults.length - 1\n            : highlightedIndex - 1,\n        );\n        break;\n\n      case Key.Enter:\n        didClickSearch(event as any);\n        break;\n    }\n  };\n\n  const didClickSearch = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onSubmit?.(\n      highlightedIndex === -1\n        ? ({ name: (event.target as HTMLInputElement).value } as ICity)\n        : searchResults[highlightedIndex],\n    );\n    setSearchValue(searchResults[highlightedIndex]?.name);\n    inputRef.current.value = searchResults[highlightedIndex]?.name || '';\n    setSearchResults([]);\n    (event.target as HTMLInputElement).blur();\n  };\n\n  return (\n    <SearchBarContainer>\n      <SearchContainer htmlFor={INPUT_ID}>\n        <StyledInput\n          ref={inputRef}\n          id={INPUT_ID}\n          type=\"text\"\n          placeholder=\"Enter a city\"\n          onInput={didChangeInput}\n          onKeyDown={didKeyPressInput}\n          autoComplete=\"off\"\n        />\n        {searchResults.length !== 0 && (\n          <Dropdown>\n            {searchResults.map((result, resultIndex) => (\n              <DropdownSearchResult\n                key={`${result.name}${result.lat}${result.lng}`}\n                highlighted={resultIndex === highlightedIndex}\n              >\n                <b>{result.name.slice(0, searchValue.length)}</b>\n                {`${result.name.slice(searchValue.length)}, ${result.country}`}\n              </DropdownSearchResult>\n            ))}\n          </Dropdown>\n        )}\n      </SearchContainer>\n\n      <ButtonContainer>\n        <SearchButton type=\"button\" onClick={didClickSearch}>\n          GET WEATHER\n        </SearchButton>\n      </ButtonContainer>\n    </SearchBarContainer>\n  );\n}\n\nconst Dropdown = styled.div`\n  background: #fff;\n  border: 0.0625rem solid #bdbdbd;\n  border-bottom-left-radius: 0.1875rem;\n  border-bottom-right-radius: 0.1875rem;\n  box-sizing: border-box;\n  margin: 0 2.5rem;\n  position: absolute;\n  top: 5.1875rem;\n  white-space: nowrap;\n  width: calc(100% - 5rem);\n`;\n\nconst DropdownSearchResult = styled.div<{ highlighted: boolean }>`\n  background: ${p => (p.highlighted ? '#eceff1' : 'transparent')};\n  font-family: 'Raleway', sans-serif;\n  overflow: hidden;\n  padding: 0.625rem 1.25rem;\n  text-overflow: ellipsis;\n`;\n\nconst SearchContainer = styled.label`\n  display: flex;\n  position: relative;\n`;\n\nconst SearchBarContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding: 1.25rem;\n  width: 100%;\n`;\n\nconst SearchButton = styled.button`\n  background: #fff;\n  border: 0;\n  border-radius: 0.1875rem;\n  color: #007c91;\n  cursor: pointer;\n  font-family: 'Raleway', sans-serif;\n  font-size: 1.25rem;\n  font-weight: bold;\n  padding: 1.25rem 2.5rem;\n\n  :hover {\n    background: #f5f5f5;\n  }\n\n  :active {\n    background: #eee;\n  }\n`;\n\nconst StyledInput = styled.input`\n  background: transparent;\n  border: 0.1875rem solid #fff;\n  border-radius: 0.1875rem;\n  color: #fff;\n  font-family: 'Raleway', sans-serif;\n  font-size: 2rem;\n  font-weight: 300;\n  margin: 0 2.5rem 2.5rem;\n  outline: 0;\n  padding: 1.25rem 0;\n  text-align: center;\n  width: 100%;\n\n  :focus {\n    background: #006978;\n  }\n\n  ::placeholder {\n    color: #fff;\n  }\n`;\n\nconst ButtonContainer = styled.div`\n  text-align: center;\n`;\n","import { OpenWeatherResponse } from 'utils/open-weather-response';\n\nconst OPEN_WEATHER_MAP_URL = 'https://api.openweathermap.org/data/2.5/weather';\n\nconst getCityWeather = async (\n  latitude?: string,\n  longitude?: string,\n): Promise<OpenWeatherResponse> => {\n  let position: any = {\n    coords: {\n      latitude,\n      longitude,\n    },\n  };\n\n  if (latitude == null || longitude == null) {\n    position = await getCoordinates();\n  }\n\n  const params = {\n    lat: position?.coords?.latitude,\n    lon: position?.coords?.longitude,\n    appid: process.env.REACT_APP_OPEN_WEATHER_API_KEY,\n    units: 'metric',\n  };\n\n  try {\n    const data = await (\n      await fetch(\n        `${OPEN_WEATHER_MAP_URL}?${new URLSearchParams(params as any)}`,\n      )\n    ).json();\n\n    return new Promise(resolve => resolve(data));\n  } catch {\n    return new Promise(resolve => resolve(null));\n  }\n};\n\nconst getCoordinates = async (): Promise<GeolocationPosition> =>\n  new Promise(resolve => {\n    navigator.geolocation.getCurrentPosition(\n      position => resolve(position),\n      () => resolve(null),\n    );\n  });\n\nexport default getCityWeather;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport ReactAnimatedWeather from 'react-animated-weather';\nimport Skeleton from 'react-loading-skeleton';\nimport styled from 'styled-components/macro';\nimport getCityWeather from 'utils/get-city-weather';\n\nexport interface IWeatherInfoProps {\n  latitude?: string;\n  longitude?: string;\n}\n\nconst weatherIconDesign = {\n  icon: 'PARTLY_CLOUDY_DAY',\n  color: '#007c91',\n  size: 192,\n  animate: true,\n};\n\nexport default function WeatherInfo({\n  latitude,\n  longitude,\n}: IWeatherInfoProps) {\n  const [temperature, setTemperature] = useState<number>();\n  // const [feelsLike, setFeelsLike] = useState<number>();\n  const [location, setLocation] = useState<string>();\n\n  const getLocalWeatherInfo = useCallback(async () => {\n    const data = await getCityWeather(latitude, longitude);\n    if (!data) {\n      // TODO: implement\n    } else {\n      switch (data.weather[0].icon) {\n        case '01d':\n          weatherIconDesign.icon = 'CLEAR_DAY';\n          break;\n        case '01n':\n          weatherIconDesign.icon = 'CLEAR_NIGHT';\n          break;\n        case '02d':\n          weatherIconDesign.icon = 'PARTLY_CLOUDY_DAY';\n          break;\n        case '02n':\n          weatherIconDesign.icon = 'PARTLY_CLOUDY_NIGHT';\n          break;\n        case '03d':\n          weatherIconDesign.icon = 'CLOUDY';\n          break;\n        case '03n':\n          weatherIconDesign.icon = 'CLOUDY';\n          break;\n        case '04d':\n          weatherIconDesign.icon = 'CLOUDY';\n          break;\n        case '04n':\n          weatherIconDesign.icon = 'CLOUDY';\n          break;\n        case '09d':\n          weatherIconDesign.icon = 'RAIN';\n          break;\n        case '09n':\n          weatherIconDesign.icon = 'RAIN';\n          break;\n        case '10d':\n          weatherIconDesign.icon = 'RAIN';\n          break;\n        case '10n':\n          weatherIconDesign.icon = 'RAIN';\n          break;\n        case '13d':\n          weatherIconDesign.icon = 'SNOW';\n          break;\n        case '13n':\n          weatherIconDesign.icon = 'SNOW';\n          break;\n        case '50d':\n          weatherIconDesign.icon = 'FOG';\n          break;\n        case '50n':\n          weatherIconDesign.icon = 'FOG';\n          break;\n        default:\n          weatherIconDesign.icon = 'WIND';\n          break;\n      }\n      setTemperature(data.main.temp);\n      // setFeelsLike(data.main.feels_like);\n      setLocation(data.name);\n    }\n  }, [latitude, longitude]);\n\n  useEffect(() => {\n    getLocalWeatherInfo();\n  }, [getLocalWeatherInfo]);\n\n  // const handleSave = (): void => {\n  //   // TODO: implement\n  // };\n\n  return (\n    <WeatherInfoContainer>\n      <LocationHeader>{location || <Skeleton width={300} />}</LocationHeader>\n      <ReactAnimatedWeather\n        icon={weatherIconDesign.icon}\n        color={weatherIconDesign.color}\n        size={weatherIconDesign.size}\n        animate={weatherIconDesign.animate}\n      />\n      <div>\n        <TemperatureHeader>\n          {temperature ? `${temperature.toFixed()}°C` : <Skeleton width={50} />}\n        </TemperatureHeader>\n        {/* <p>\n          Feels like{' '}\n          {feelsLike ? `${feelsLike.toFixed()}°C` : <Skeleton width={30} />}\n        </p> */}\n      </div>\n      {/* <button type=\"button\" onClick={handleSave}>\n        Save Location\n      </button> */}\n    </WeatherInfoContainer>\n  );\n}\n\nconst WeatherInfoContainer = styled.div`\n  margin: 1.25rem;\n  text-align: center;\n`;\n\nconst LocationHeader = styled.h1`\n  color: #007c91;\n  font-family: 'Raleway', sans-serif;\n  font-size: 4rem;\n  font-weight: 500;\n`;\n\nconst TemperatureHeader = styled.h1`\n  color: #007c91;\n  font-family: 'Raleway', sans-serif;\n  font-size: 4rem;\n  font-weight: 500;\n`;\n","/*\n * Media queries utility\n */\n\nimport {\n  css,\n  CSSObject,\n  DefaultTheme,\n  FlattenInterpolation,\n  Interpolation,\n  InterpolationFunction,\n  ThemedStyledProps,\n} from 'styled-components/macro';\n\n/*\n * Taken from https://github.com/DefinitelyTyped/DefinitelyTyped/issues/32914\n */\n\n// Update your breakpoints if you want\nexport const sizes = {\n  small: 600,\n  medium: 1024,\n  large: 1440,\n  xlarge: 1920,\n};\n\n// Iterate through the sizes and create a media template\nexport const media = (Object.keys(sizes) as Array<keyof typeof sizes>).reduce(\n  (acc, label) => {\n    acc[label] = (first: any, ...interpolations: any[]) => css`\n      @media (min-width: ${sizes[label]}px) {\n        ${css(first, ...interpolations)}\n      }\n    `;\n\n    return acc;\n  },\n  {} as { [key in keyof typeof sizes]: MediaFunction },\n);\n\n/*\n * @types/styled-component is not working properly as explained in the github issue referenced above.\n * We must overcome this with custom typings, however, this might not work in time as the styled-components update.\n * Be carefull and keep an eye on the issue and the possible improvements\n */\ntype MediaFunction = <P extends object>(\n  first:\n    | TemplateStringsArray\n    | CSSObject\n    | InterpolationFunction<ThemedStyledProps<P, DefaultTheme>>,\n  ...interpolations: Array<Interpolation<ThemedStyledProps<P, DefaultTheme>>>\n) => FlattenInterpolation<ThemedStyledProps<P, DefaultTheme>>;\n\n/* Example\nconst SomeDiv = styled.div`\n  display: flex;\n  ....\n  ${media.medium`\n    display: block\n  `}\n`;\n*/\n","import SearchBar from 'app/components/SearchBar';\nimport { ICity } from 'app/components/SearchBar/i-city';\nimport WeatherInfo from 'app/components/WeatherInfo';\nimport React, { useState } from 'react';\nimport styled from 'styled-components/macro';\nimport { media } from 'styles/media';\n\nexport default function HomePage() {\n  const [city, setCity] = useState<ICity>();\n\n  const didSubmit = (value: ICity) => {\n    setCity(value);\n  };\n  return (\n    <HomePageContainer>\n      <SearchContainer>\n        <Header>Weather App</Header>\n        <SearchBar onSubmit={didSubmit} />\n      </SearchContainer>\n      {/* <CityList /> */}\n      <ResultContainer>\n        <WeatherInfo latitude={city?.lat} longitude={city?.lng} />\n      </ResultContainer>\n    </HomePageContainer>\n  );\n}\n\nconst ResultContainer = styled.div`\n  align-content: center;\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  height: inherit;\n  justify-content: center;\n`;\n\nconst SearchContainer = styled(ResultContainer)`\n  background-color: #007c91;\n  border-radius: 0.1875rem;\n  height: calc(100vh - 2.5rem);\n  margin: 1.25rem;\n`;\n\nconst HomePageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n\n  ${media.medium`\n    flex-direction: row;\n  `}\n`;\n\nconst Header = styled.div`\n  color: #fff;\n  font-family: 'Raleway', sans-serif;\n  font-size: 4rem;\n  font-weight: 500;\n  margin: 0 2.5rem 8rem;\n  text-align: center;\n`;\n","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  html,\n  body {\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    width: 100%;\n  }\n  \n  /* stylelint-disable-next-line selector-max-id */\n  #root {\n    min-height: 100%;\n    min-width: 100%;\n  }\n`;\n","import HomePage from 'app/pages/HomePage';\nimport React from 'react';\nimport { GlobalStyle } from 'styles/global-styles';\n\nfunction App() {\n  return (\n    <>\n      <HomePage />\n      <GlobalStyle />\n    </>\n  );\n}\n\nexport default App;\n","import { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql',\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}